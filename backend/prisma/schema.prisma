// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
}

enum Rank {
  UNRANKED
  BRONZE
  SILVER
  GOLD
  PLATINUM
  EMERALD
  DIAMOND
  MASTER
  GRANDMASTER
  LEGEND
  CHAMPION
}

model User {
  id          String     @id @default(cuid())
  displayname String
  login       String     @unique
  email       String     @unique
  status      UserStatus @default(OFFLINE) @map("status")
  firstTwoFactor      Boolean        @default(true)

  totp Json
  isCompleted          Boolean        @default(false)

  // friends of the User
  friends              Friend[]       @relation("userFriends")
  // users who are Friends with this User
  myFriends            Friend[]       @relation("friendsOfUser")
  messages             Message[]
  senderNotification   Notification[] @relation("sender")
  receiverNotification Notification[] @relation("receiver")
  userGameHistory      Game[]         @relation(name: "user")
  oppGameHistory       Game[]         @relation(name: "opponent")

  achievement Achievement[]
  avatar      Json

  // moderatorForChannel   Channel? @relation(name: "moderators", fields: [moderatorForChannelId], references: [id])
  // moderatorForChannelId String?  @map("moderator_for_channel") // TODO: find a name 
  // memberForChannel      Channel? @relation(name: "members", fields: [memberForChannelId], references: [id])
  // memberForChannelId    String?  @map("member_for_channel_id")
  // games Game[]
  stat   Stat   @relation(fields: [statId], references: [id])
  statId String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum FriendState {
  NONE
  BLOCKED
  PENDING
  ACCEPTED
  REFUSED
}

model Friend {
  id       String      @id @default(cuid())
  state    FriendState
  user     User        @relation(name: "userFriends", fields: [userId], references: [id])
  userId   String      @map("user_id")
  friend   User        @relation(name: "friendsOfUser", fields: [friendId], references: [id])
  friendId String      @map("friend_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("friends")
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("achievements")
}

enum NotifType {
  MESSAGE
  GAME_REQUEST
  FRIEND_REQUEST
  FRIEND_ACCEPT
}

model Notification {
  id      String    @id @default(cuid())
  content Json?
  type    NotifType @map("notif_type")

  sender     User   @relation(name: "sender", fields: [senderId], references: [id])
  senderId   String @map("sender_id")
  receiver   User   @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId String @map("receiver_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

enum Mode {
  CLASSIC
  RANKED
}

model Game {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  user           User     @relation(name: "user", fields: [userId], references: [id])
  opponentId     String   @map("opponent_id")
  opponent       User     @relation(name: "opponent", fields: [opponentId], references: [id])
  oppnentScore   Int
  userScore      Int
  mode           Mode
  userStatus     Boolean
  opponentStatus Boolean
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("games")
}

model Stat {
  id        String @id @unique @default(cuid())
  vectories Int
  defeats   Int
  points    Int
  rank      Rank
  user      User?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("stats")
}

enum MessageType {
  TEXT
  FILE
}

model Message {
  id      String      @id @default(cuid())
  type    MessageType @default(TEXT)
  content Json

  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id")
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String  @map("channel_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("messages")
}

enum RoomType {
  PRIVATE
  PUBLIC
  PROTECTED
}

model Channel {
  id       String   @id @default(cuid())
  type     RoomType
  name     String
  password String?
  isDM     Boolean  @map("is_dm")

  messages Message[]
  // moderators User[]    @relation("moderators")
  // members    User[]    @relation("members")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("channels")
}
